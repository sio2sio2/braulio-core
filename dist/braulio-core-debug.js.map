{"version":3,"sources":["webpack:///webpack/universalModuleDefinition","webpack:///webpack/bootstrap","webpack:///external \"gapi\"","webpack:///./src/auth.js","webpack:///./src/api.js","webpack:///./src/config.js","webpack:///./src/index.js"],"names":["root","factory","exports","module","require","define","amd","window","__WEBPACK_EXTERNAL_MODULE__0__","installedModules","__webpack_require__","moduleId","i","l","modules","call","m","c","d","name","getter","o","Object","defineProperty","enumerable","get","r","Symbol","toStringTag","value","t","mode","__esModule","ns","create","key","bind","n","object","property","prototype","hasOwnProperty","p","s","OAuthClient","params","this","identity","_events","init","gapi","load","client","then","auth2","getAuthInstance","isSignedIn","listen","_updateSigninStatus","_isSignedIn","forEach","f","type","target","error","addEventListener","eventname","push","e","currentUser","getBasicProfile","email","getEmail","getName","signin","signIn","signout","signOut","domain","split","getList","args","listattr","limit","getAttr","obj","list","length","shift","async","iter","iargs","assign","ilimit","buffer","Promise","resolve","reject","request","response","pageToken","result","nextPageToken","maxResults","undefined","Math","min","lista","user","obtUsuarios","path","method","obtGrupos","userKey","customer","listarMiembros","groupKey","includeDerivedMembership","vaciarGrupo","grupo","batch","newBatch","miembros","add","directory","members","delete","memberKey","id","fromEntries","entries","map","code","status","message","poblarGrupo","agregarMiembros","resgrupo","filter","indexOf","requests","member","insert","results","groups","dpto","crearDepartamentos","nombre","departamentos","emails","description","body","console","warn","testGroupsRequest","alt","log","crearProfesores","crearNick","crearAlumnos","Config","defineProperties","writable","_id","spaces","q","files","parents","mimeType","getFileID","read","write","content","JSON","stringify","remove","cliente","discoveryDocs","scope","config","api"],"mappings":"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","file":"braulio-core-debug.js","sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory(require(\"gapi\"));\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine(\"B\", [\"gapi\"], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"B\"] = factory(require(\"gapi\"));\n\telse\n\t\troot[\"B\"] = factory(root[\"gapi\"]);\n})(window, function(__WEBPACK_EXTERNAL_MODULE__0__) {\nreturn "," \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 4);\n","module.exports = __WEBPACK_EXTERNAL_MODULE__0__;","/**\n * Autenticación OAuth2 de Google.\n *\n * Uso:\n *\n *    const cliente = new OAuthClient({\n *       discoveryDocs: [\"https://www.googleapis.com/discovery/v1/apis/admin/directory_v1/rest\"],\n *       scope: \"https://a https://b https://c\",  // a,b,c habrá que verlos en la documentación de Google.\n *       clientId: \"xxxxxx\",\n *       apiKey: \"AAAAAAA\",\n *       hosted_domain: \"nuestro@dominio\"  // Esto es opcional.\n *    });\n *\n *    // Añadimos con cliente.addEvenListener lo que queremos hacer cuando se produzcan\n *    // los eventos \"succeed\", \"failed\", \"signedin\", \"signedout\".\n *\n *    cliente.init();\n */\n\nfunction OAuthClient(params) {\n   this.params = params;\n   this.identity = null;\n   this._events = {};     // Eventos registrados.\n}\n\n/**\n * Inicializa el objeto propiamente.\n */\nOAuthClient.prototype.init = function() {\n   gapi.load('client:auth2', () => {\n       gapi.client.init(this.params).then(() => {\n          gapi.auth2.getAuthInstance().isSignedIn.listen(s => this._updateSigninStatus(s));\n          this._updateSigninStatus(this._isSignedIn());\n          // TODO: Controlar esto. ¿Puede usarse en vez de como está hecho hasta ahora para indicar el usuario en la web?\n          //gapi.auth2.getAuthInstance().currentUser.listen(s => console.log(\"DEBUG\", s));\n          // Ejecutamos todas las acciones asociadas a la inicialización.\n          (this._events[\"succeed\"] || []).forEach(f => f.call(this, {\n             type: \"succeed\",\n             target: this\n          }));\n       }, error => {\n          (this._events[\"failed\"] || []).forEach(f => f.call(this, {\n             type: \"failed\",\n             target: this,\n             error: error\n          }));\n       });\n   });\n}\n\n/**\n * Añade eventos que se disparan cuando:\n *\n * * succeed, el objeto se carga adecuadamente.\n * * failed, el objeto no puede cargarse.\n * * signedid, el usuario se autentica.\n * * signedout, el usuario se desautentica.\n */\nOAuthClient.prototype.addEventListener = function(eventname, f) {\n   this._events[eventname] = this._events[eventname] || []\n   this._events[eventname].push(f);\n}\n\n// QUé se hace cuando cambia de estado el objeto,\n// o sea, cuando el usuario ingresa o sale.\nOAuthClient.prototype._updateSigninStatus = function(isSignedIn) {\n   let e = isSignedIn;\n\n   if(isSignedIn) {\n      e = \"signedin\";\n      const identity = gapi.auth2.getAuthInstance().currentUser.get().getBasicProfile();\n      this.identity = {\n         email: identity.getEmail(),\n         name: identity.getName()\n      }\n   }\n   else {\n      e = \"signedout\";\n      this.identity = null;\n   }\n   \n   (this._events[e] || []).forEach(f => f.call(this, {\n       type: e,\n       target: this\n   }));\n}\n\nOAuthClient.prototype._isSignedIn = function() {\n   return gapi.auth2.getAuthInstance().isSignedIn.get()\n}\n\n/**\n * Inicia el proceso de autenticación\n */\nOAuthClient.prototype.signin = function() {\n   gapi.auth2.getAuthInstance().signIn();\n}\n\n/**\n * Inicia el proceso de desautenticación.\n */\nOAuthClient.prototype.signout = function() {\n   gapi.auth2.getAuthInstance().signOut();\n}\n\n/**\n * Dominio en el que se está autenticado.\n *\n * @returns {String} El dominio.\n */\nOAuthClient.prototype.domain = function() {\n   if(!this.identity) return null;\n   else return this.identity.email.split('@')[1];\n}\n\nexport default OAuthClient;\n","/**\n * Obtiene listas completas de G-Śuite que limitan el número\n * máximo de resultados por consulta.\n *\n * @oaram {Object} args: Los argumentos de la petición tal como los\n *    exige gapi.client.request\n *    (https://github.com/google/google-api-javascript-client/blob/master/docs/reference.md#----gapiclientrequestargs--).\n * @param {String} listattr: Dónde se encuentra la lista devuelta en la respuesta a la petición.\n *    Por ejemplo, si la lista de respuesta se encuentra en response.result.groups. el valor\n *    de este parámetro será \"result.groups\".\n * @param {limit} int: Número máximo de resultados que se desean obtener.\n *\n * @returns {Object} Objeto con dos métodos, uno que devuelve un iterador asíncrono\n * que en cada iteración devuelve un elemento; y otro que devuelve una promesa\n * con la lista completa.\n */\nfunction getList(args, listattr, limit) {\n   function getAttr(obj, list) {\n      list = list.split(\".\");\n      while(list.length>0) obj = obj[list.shift()];\n      return obj;\n   }\n\n   args.params.maxResults = Math.min(limit || args.params.maxResults, args.params.maxResults);\n\n   async function* iter() {\n      const iargs = Object.assign({}, args);\n      let   ilimit = limit;\n      iargs.params = Object.assign({}, args.params);\n\n      do {\n         var buffer = await new Promise((resolve, reject) => {\n            gapi.client.request(iargs).then(function(response) {\n               iargs.params.pageToken = response.result.nextPageToken;\n               resolve(getAttr(response, listattr));\n            }, error => reject(error));\n         });\n         \n         while(buffer && buffer.length) yield buffer.shift();\n         if(ilimit) ilimit -= iargs.params.maxResults;\n\n      } while(iargs.params.pageToken && (ilimit === undefined || ilimit > 0));\n   }\n\n   return {\n      iter: iter,  // Itera sobre cada usuario.\n      get: function() {  // Devuelve una promesa con la lista completa.\n        return new Promise(async (resolve, reject) => {\n            const lista = [];\n            try {\n               for await (const user of iter()) lista.push(user);\n            }\n            catch(error) { reject(error); }\n            resolve(lista);\n         });\n      }\n   }\n}\n\n\n/**\n * Obtiene una lista de usuarios.\n *\n * @param {Object} args: Argumentos de la petición. Ver:\n *    https://developers.google.com/admin-sdk/directory/v1/reference/users/list#parameters\n *\n *    Añade, además, \"limit\" para no obtener más de N usuarios.\n *\n * @returns {Object}: iter(), para un iterador asíncrono; y get(), para una promesa\n *    que devuelve la lista completa.\n *\n * Ejemplos:\n *\n *   // Para completarse la consulta,\n *   // puede que se requieran dos peticiones.\n *   const params = {\n *            limit: 100,\n *            maxResults: 50,\n *            query: \"orgUnitPath=/claustro\"\n *         }\n *\n *   // 1)\n *   api.obtUsuarios(params).get().then(users => {\n *      console.log(\"Estos son 100 primeros profesores\");\n *      users.forEach((u, i) => console.log(i + \". \" + u.primaryEmail));\n *   });\n *\n *   // 2) \n *   const users = await api.obtUsuarios(params).get();\n *   console.log(\"Estos son 100 primeros profesores\");\n *   users.forEach((u, i) => console.log(i + \". \" + u.primaryEmail));\n *\n *    // 3) Iterador asíncrono: no espera a tener los 100 profesores,\n *    //    sino que imprmirá 50 y luego otros 50.\n *    console.log(\"Estos son 100 primeros profesores\");\n *    var i = 0;\n *    for await (const u of api.obtUsuarios(params).iter()) {\n *       i++;\n *       console.log(i + \". \" + u.primaryEmail);\n *    }\n */\nexport function obtUsuarios(args) {\n   args = args || {};\n   const limit = args.limit;\n   delete args.limit;\n   \n   args = Object.assign({\n      'customer': 'my_customer',\n      'orderBy': 'email',\n      'maxResults': 500,\n   }, args)\n\n   const query_params = {\n      path: \"https://www.googleapis.com/admin/directory/v1/users\",\n      method: \"GET\",\n      params: args\n   }\n\n   return getList(query_params, \"result.users\", limit);\n}\n\n\n/**\n * Obtiene una lista de de grupos.\n * @param {Object} args: Argumentos de la petición. Ver:\n *    https://developers.google.com/admin-sdk/directory/v1/reference/groups/list#parameters\n *\n *    Añade, además, \"limit\" para no obtener más de N grupos..\n *\n * @returns {Object}: iter(), para un iterador asíncrono; y get(), para una promesa\n *    que devuelve la lista completa.\n *\n * Véanse los ejemplos de obtUsuarios.\n */\nexport function obtGrupos(args) {\n   args = args || {};\n   const limit = args.limit;\n   delete args.limit;\n   \n   args = Object.assign({\n      'customer': 'my_customer',\n      'orderBy': 'email',\n      'maxResults': 200,\n   }, args);\n\n   // Cuando se piden los grupos a los que pertenece\n   // un usuarios, no puede inclurse customer.\n   if(args.userKey) delete args.customer;\n\n   const query_params = {\n      path: \"https://www.googleapis.com/admin/directory/v1/groups\",\n      method: \"GET\",\n      params: args\n   }\n\n   return getList(query_params, \"result.groups\", limit);\n}\n\n\n/**\n * Lista todos los miemnbros de un grupo.\n *\n * @param {String} groupKey: Grupo del que quieren obtenerse los miembros.\n * @param {Object} args: Argumentos de la petición. Ver:\n *    https://developers.google.com/admin-sdk/directory/v1/reference/members/list#parameters\n *\n *    Añade, además, \"limit\" para no obtener más de N miembros.\n *\n * @returns {Object}: iter(), para un iterador asíncrono; y get(), para una promesa\n *    que devuelve la lista completa.\n *\n * Véanse los ejemplos de obtUsuarios.\n */\nexport function listarMiembros(groupKey, args) {\n   args = args || {};\n   const limit = args.limit;\n   delete args.limit;\n   \n   args = Object.assign({\n      includeDerivedMembership: false,\n      'maxResults': 200,\n   }, args);\n\n   const query_params = {\n      path: \"https://www.googleapis.com/admin/directory/v1/groups/\" + groupKey + \"/members\",\n      method: \"GET\",\n      params: args\n   }\n\n   return getList(query_params, \"result.members\", limit);\n}\n\n\n/**\n * Elimina todos los miembros de un grupo\n *\n * @param {String} grupo: Dirección del grupo del que se quieren obtener los miembros.\n *\n * @returns {Promise} Promeesa que devuelve un objeto cuyas claves son\n *    los miembros eliminados del grupo, y cuyas claves el resultado de esa eliminación\n *    (siempre debería ser éxito).\n */\nexport async function vaciarGrupo(grupo) {\n   const batch = gapi.client.newBatch();\n\n   const miembros = await listarMiembros(grupo).get();\n   for(const m of miembros) {\n      batch.add(gapi.client.directory.members.delete({\n            groupKey: grupo,\n            memberKey: m.email\n         }), {id: m.email});\n   }\n\n   return new Promise(resolve => {\n      if(miembros.length) {\n         batch.then(response => {\n            resolve(Object.fromEntries(Object.entries(response.result)\n               .map(([email, value]) => [email, value.result && value.result.error || {code: value.status, message: \"OK\"}])));\n         }); \n      }\n      else resolve({});\n   });\n}\n\n\n/**\n * Puebla de miembros un grupo.\n *\n * @param {Object} grupo: Objeto que representa al grupo y que se intanta crear,\n *    por si no existe. El objeto es {email: xxx, name: xxx, description: xxx}\n * @param {array} miembros: Direcciones de los miembros que pertenecerán al grupo.\n */\nexport function poblarGrupo(grupo, miembros) {\n   return new Promise(resolve => {\n\n      // Intenta crear el grupo por si no existe.\n      gapi.client.directory.groups.insert(grupo)\n        .then(response => agregarMiembros({dpto: {code: response.status, message: null}}),\n              error => agregarMiembros({dpto: error.result.error}));\n\n      function agregarMiembros(resgrupo) {\n         // Eliminamos miembros repetidos\n         miembros = miembros.filter((e, i) => miembros.indexOf(e) === i);\n\n         const batch = gapi.client.newBatch(),\n               requests = miembros.map(member => gapi.client.directory.members.insert({\n            groupKey: grupo.email,\n            email: member\n         }));\n\n         for(let i=0; i<miembros.length; i++) batch.add(requests[i], {id: miembros[i]});\n         batch.then(response => {\n            var results = Object.fromEntries(Object.entries(response.result)\n               .map(([email, value]) => [email, value.result.error || {code: value.status, message: \"OK\"}]));\n            resolve(Object.assign(resgrupo, {members: results}));\n         });\n      } \n   });\n}\n\n\n/**\n * Crea la estructura de departamentos.\n *\n * @param {String} grupo: Nombre del grupo que incluye todos los grupos de departamento..\n * @param {array} departamentos: La lista de grupos que son departamentos.\n */\nexport async function crearDepartamentos(nombre, departamentos) {\n\n   const batch = gapi.client.newBatch(),\n         emails = departamentos.map(d => d.email);\n\n   // Elimina departamentos repetidos.\n   departamentos = departamentos\n      .filter((d, i) => emails.indexOf(d.email) === i)  // Elimina departamentos repetidos.\n      .map(d => Object({\n         email: d.email,\n         name: d.nombre,\n         description: \"Departamento de \" + d.nombre\n      }));\n\n   if(departamentos.length) {\n      departamentos.forEach(d => {\n         batch.add(gapi.client.request({\n            path: \"https://www.googleapis.com/admin/directory/v1/groups\",\n            method: \"POST\",\n            body: d\n         }), {id: d.email})\n      });\n\n      try {\n         await new Promise((resolve, reject) => batch.then(response => resolve(response),\n                                                           error => reject(error)));\n      }\n      catch(error) {\n         console.warn(\"Todos los departamentos estaban ya creados\");\n      }\n   }\n\n   return poblarGrupo({\n            email: nombre,\n            name: \"Departamentos didácticos\",\n            description: \"Todos los departamentos didácticos y de familia profesional\"\n          }, departamentos.map(d => d.email));\n}\n\n\n// Prueba de API usando Request.\nexport function testGroupsRequest(grupo) {\n   gapi.client.request({\n      path: \"https://www.googleapis.com/groups/v1/groups/\" + grupo,\n      method: \"GET\",\n      params: {alt: \"JSON\"},\n   }).then(response => console.log(response.body), error => console.log(error));\n}\n\n// str.normalize(\"NFD\").replace(/[\\u0300-\\u036f]/g, \"\")\n\n/**\n * Crea los profesores contenidos en una lista.\n *\n * @param {array} lista: La lista de profesores. Cada uno de ellos\n *    es un objeto que contiene su nombre y el puesto que desempeña.\n * @param {function} crearNick: Función que genera el nombre de\n *    usuario a partir del nombre real del profesor.\n */\nexport function crearProfesores(lista, crearNick) {\n   const batch = gapi.client.newBatch();\n   lista.forEach(p => {\n      true;\n   });\n}\n\n\nexport function crearAlumnos(nombre, lista, crearNick) {\n}\n\n\n","/**\n * Manipula la configuración del programa almacenada en el Drive del usuaario.\n *\n * @param {String} name: Nombre del fichero de configuración.\n */\nfunction Config(name) {\n   Object.defineProperties(this, {\n      \"_id\": {\n         enumerable: false,\n         writable: true,\n         value: null\n      },\n      \"id\": { \n         get: function() {\n            if(!this._id) this._id = getFileID(name);\n            return this._id;\n         }\n      }\n   });\n}\n\n\n/**\n * Obtiene el identificador del fichero de configuración y, si no\n * existe, crea el fichero JSON vació y devuelve su identificador.\n */\nfunction getFileID(name) {\n   return new Promise((resolve, reject) => {\n      gapi.client.request({\n         path: \"https://www.googleapis.com/drive/v3/files\",\n         method: \"GET\",\n         params: {\n            spaces: \"appDataFolder\",\n            q: \"name = '\" + name + \"'\"\n         }\n      }).then(response => {\n         const files = response.result.files;\n         switch(files.length) {\n            case 0:  // El fichero no existe: hay que crearlo.\n               console.warn(\"No hay configuración previa\");\n               const params = {\n                        name: name,\n                        parents: ['appDataFolder'],\n                        description: \"Configuración de Braulio\",\n                        mimeType: \"application/json\"\n                     };\n               gapi.client.request({\n                  path: \"https://www.googleapis.com/drive/v3/files\",\n                  method: \"POST\",\n                  body: params\n               }).then(response => {\n                     const id = response.result.id;\n                     gapi.client.request({\n                        path: \"https://www.googleapis.com/upload/drive/v3/files/\" + id,\n                        method: \"PATCH\",\n                        body: '{}' // Fichero vacío.\n                     }).then(response => resolve(id));\n                  });\n               break;\n            case 1:  // El fichero existe, se devuelve su ID.\n               resolve(files[0].id);\n               break;\n            default:\n               reject(\"Hay más de un fichero de configuración\");\n         }\n      });\n   });\n}\n\n\n/**\n * Obtiene el contenido del fichero de configuración\n *\n * @returns {Promise} Promesa con el contenido.\n */\nConfig.prototype.read = function() {\n   return new Promise(async resolve => {\n            const id = await this.id;\n\n            gapi.client.request({\n               path: \"https://www.googleapis.com/drive/v3/files/\" + id,\n               method: \"GET\",\n               params: {alt: \"media\"}  // Para que devuelva el fichero y no los metadatos.\n            }).then(response => resolve(response.result));\n          });\n}\n\n\n/**\n * Sobrescribe el fichero de configuración.\n *\n * @param {Object} content: Objeto que será el nuevo contenido.\n *\n * @returns {Promise} Promesa con la respuesta a la acción.\n */\nConfig.prototype.write = function(content) {\n   return new Promise(async resolve => {\n            gapi.client.request({\n               path: \"https://www.googleapis.com/upload/drive/v3/files/\" + await this.id,\n               method: \"PATCH\",\n               body: JSON.stringify(content),\n            }).then(response => resolve(response));\n          });\n}\n\n\n/**\n * Elimina el fichero de configuración\n *\n * @returns {Promise} Promesa con la respuesta a la eliminación.\n */\nConfig.prototype.remove = function() {\n   return new Promise(async resolve => {\n            gapi.client.request({\n               path: \"https://www.googleapis.com/drive/v3/files/\" + await this.id,\n               method: \"DELETE\"\n            }).then(response => {\n                  this._id = null;\n                  resolve(response);\n               });\n          });\n}\n\nexport default Config; \n","import OAuthClient from \"./auth.js\";\nimport * as api from \"./api.js\";\nimport Config from \"./config.js\";\n\nfunction crearCliente(name, params) {\n   const cliente = new OAuthClient(Object.assign(params, {\n                     discoveryDocs: [\"https://www.googleapis.com/discovery/v1/apis/admin/directory_v1/rest\"],\n                     scope: (\"https://www.googleapis.com/auth/admin.directory.user \" +\n                             \"https://www.googleapis.com/auth/admin.directory.group \" +\n                             \"https://www.googleapis.com/auth/apps.groups.settings \" +\n                             \"https://www.googleapis.com/auth/drive.appdata\")\n                   }));\n\n   // Enlaza con el fichero de configuración correspondiente,\n   // cuando nos identificamos.\n   cliente.addEventListener(\"signedin\", e => e.target.config = new Config(name));\n   cliente.addEventListener(\"signedout\", e => e.target.config = null);\n\n   cliente.api = api;  // API de comunicación con G-Suite.\n\n   return cliente;\n}\n\nexport default crearCliente;\n"],"sourceRoot":""}